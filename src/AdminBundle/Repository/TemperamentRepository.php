<?php

namespace AdminBundle\Repository;

use AdminBundle\Entity\Temperament;

/**
 * TemperamentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TemperamentRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Renvois tout les temperament
     *
     * @return array
     */
    public function getTemperaments()
    {
        return $this->findAll();
    }

    public function getTemperamentsWithQueryBuilder()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select("t.id, t.name, t.temperament, t.opposedTemperament")
            ->from("AdminBundle:Temperament", "t")
            ->getQuery()->getResult();
    }

    /**
     * Renvois un temperaments grâce à sont id
     *
     * @param $ptId
     *
     * @return null|object
     */
    public function getTemperamentById($ptId)
    {
        return $this->findOneBy(["id" => $ptId]);
    }

    /**
     * Renvois un temperaments grâce à sont nom
     *
     * @param $name
     *
     * @return null|object
     */
    public function getTemperamentByName($name)
    {
        return $this->findOneBy(['name' => $name]);
    }

    public function postTemperament($name, $temperament, $opposedTemperament)
    {
        if(!$this->checkIfTemperamentAlreadyExist($name))
        {
            $em = $this->getEntityManager();
            $jobRepository = $this->getEntityManager()->getRepository("AdminBundle:Job");
            $JobPersonnalityRepository = $this->getEntityManager()->getRepository("AdminBundle:JobTemperament");

            $jobs = $jobRepository->getJobs();

            if(is_string($name))
            {
                $pT = new Temperament();

                $pT->setName($name)
                    ->setTemperament($temperament)
                    ->setOpposedTemperament($opposedTemperament);

                $em->persist($pT);
                $em->flush();


                foreach($jobs as $job)
                {
                    $JobPersonnalityRepository->postJobTemperament(50, $job, $pT);
                }

                return $pT;
            }
        }

        return false;
    }

    /**
     * Modifie un type de personnalité
     *
     * @param $id
     * @param $name
     * @param $temperament
     * @param $opposedTemperament
     *
     * @return bool|null|object
     */
    public function putTemperament($id, $name, $temperament, $opposedTemperament)
    {
        $em = $this->getEntityManager();

        $pT = $this->getTemperamentById($id);

        if(is_null($pT))
        {
            return false;
        }

        $pT->setName($name)
            ->setTemperament($temperament)
            ->setOpposedTemperament($opposedTemperament);

        $em->persist($pT);
        $em->flush();

        return $pT;
    }

    /**
     * Supprime un type de personnalité
     *
     * @param $id
     *
     * @return bool
     */
    public function deleteTemperament($id)
    {
        $em = $this->getEntityManager();

        $pT = $this->getTemperamentById($id);

        if(is_null($pT))
        {
            return false;
        }

        $em->remove($pT);
        $em->flush();

        return true;
    }

    /**
     * Renvois true si le type de personnalité existe déjà
     *
     * @param $name
     *
     * @return bool
     */
    public function checkIfTemperamentAlreadyExist($name)
    {
        $isHereOrNot = $this->getEntityManager()->createQueryBuilder()
            ->select("pT")
            ->from("AdminBundle:Temperament", "pT")
            ->where("pT.name = :name")
            ->setParameter(":name", $name)
            ->getQuery()
            ->getResult();

        if(count($isHereOrNot))
            return true;

        return false;
    }
}
