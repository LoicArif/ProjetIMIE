<?php

namespace AdminBundle\Repository;

use AdminBundle\Entity\PersonnalityType;
use AdminBundle\Entity\Question;
use AdminBundle\Entity\Response;

/**
 * RESPONSERepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResponseRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Renvois toutes les réponses enregistrer en base
     *
     * @return array
     */
    public function getResponses()
    {
        return $this->findAll();
    }

    /**
     * Renvois la réponse correspondant à un id
     *
     * @param $id
     *
     * @return null|object
     */
    public function getResponseById($id)
    {
        return $this->findOneBy(['id' => $id]);
    }

    /**
     * Renvois les réponses pour une question
     *
     * @param $questionId
     * @return array|bool
     */
    public function getResponseByQuestionId($questionId)
    {
        $question = $this->getEntityManager()->getRepository("AdminBundle:Question")->getQuestionById($questionId);

        return $this->findBy(['question' => $question]);
    }

    /**
     * Créer une réponse
     *
     * @param $label
     * @param $value
     * @param $image
     * @param Question $question
     * @param PersonnalityType $personnalityType
     *
     * @return Response|bool
     */
    public function postResponse($label, $value, $image, Question $question, PersonnalityType $personnalityType)
    {
        if (!$this->checkIfReponseAlreadyExist($label))
        {
            $em = $this->getEntityManager();

            $response = new Response();

            $response->setLabel($label)
                ->setValue($value)
                ->setImage($image)
                ->setQuestion($question)
                ->setPersonnalityType($personnalityType);

            $em->persist($response);
            $em->flush();

            return $response;
        }

        return false;
    }

    /**
     * Modifie une réponse
     *
     * @param $id
     * @param $label
     * @param $value
     * @param $image
     * @param PersonnalityType $personnalityType
     *
     * @return bool|object
     */
    public function putResponse($id, $label, $value, $image, PersonnalityType $personnalityType)
    {
        $em = $this->getEntityManager();

        if (!$this->checkIfReponseAlreadyExist($label))
        {
            $response = $this->getResponseById($id);

            $response->setLabel($label)
                ->setValue($value)
                ->setImage($image)
                ->setPersonnalityType($personnalityType);

            $em->persist($response);
            $em->flush();

            return $response;
        }

        return false;
    }

    /**
     * Supprime une réponse
     * @param $id
     */
    public function deleteResponse($id)
    {
        $em = $this->getEntityManager();

        $response = $this->getResponseById($id);

        $em->remove($response);
        $em->flush();
    }

    /**
     * Renvois true si la réponse existe déjà
     *
     * @param $label
     *
     * @return bool
     */
    public function checkIfReponseAlreadyExist($label)
    {
        $isHereOrNot = $this->getEntityManager()->createQueryBuilder()
            ->select("r")
            ->from("AdminBundle:Response", "r")
            ->where("r.label = :label")
            ->setParameter(":label", $label)
            ->getQuery()
            ->getResult();

        if (count($isHereOrNot))
        {
            return true;
        }

        return false;
    }
}
