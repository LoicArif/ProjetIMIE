<?php

namespace AdminBundle\Repository;
use AdminBundle\Entity\Visitor;

/**
 * StatistiqueRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VisitorRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return array
     */
    public function getVisitors()
    {
        return $this->findAll();
    }

    /**
     * @param $id
     * @return null|object
     */
    public function getVisitorById($id)
    {
        return $this->findOneBy(['id' => $id]);
    }

    /**
     * @param $ip
     * @return array
     */
    public function getVisitorByIp($ip)
    {
        $result = $this->findBy(['ip' => $ip]);

        if(count($result) === 1)
            return $result[0];

        return $result;
    }

    /**
     * @return mixed
     */
    public function getNumberOfConnectionByCountry()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('v.country, count(v)')
            ->from('AdminBundle:Visitor', 'v')
            ->groupBy("v.country")
            ->getQuery()->getScalarResult();

    }

    public function getRegisteredYears()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select("YEAR(v.connexionDate) as year")
            ->from("AdminBundle:Visitor", "v")
            ->groupBy("year")
            ->getQuery()->getResult();
    }

    public function getVisitorBy($string, $year)
    {
        $lower = strtolower($string);

        return $this->getEntityManager()->createQueryBuilder()
            ->select("$string(v.connexionDate) as $lower,count(v)")
            ->from("AdminBundle:Visitor", "v")
            ->where("YEAR(v.connexionDate) = $year")
            ->groupBy($lower)
            ->getQuery()->getScalarResult();
    }

    public function getBrowser()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('v.browser, count(v)')
            ->from('AdminBundle:Visitor', 'v')
            ->groupBy("v.browser")
            ->getQuery()->getScalarResult();

    }

    /**
     * @param $ip
     * @param $browser
     * @param $country
     * @param $connexionDate
     * @return Visitor|bool
     */
    public function postVisitor($ip, $browser, $country, $connexionDate)
    {
        if(!is_null($ip) && !is_null($browser) && !is_null($country) && !is_null($connexionDate))
        {
            $em = $this->getEntityManager();
            $visitor = new Visitor();

            $visitor->setIp($ip)
                ->setBrowser($browser)
                ->setConnexionDate($connexionDate)
                ->setCountry($country);

            $em->persist($visitor);
            $em->flush($visitor);

            return $visitor;
        }
        else
        {
            return false;
        }
    }

}
