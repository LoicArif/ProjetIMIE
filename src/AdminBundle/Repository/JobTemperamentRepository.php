<?php

namespace AdminBundle\Repository;

use AdminBundle\Entity\Job;
use AdminBundle\Entity\JobTemperament;
use AdminBundle\Entity\Temperament;

/**
 * JobPersonnalityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobTemperamentRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Renvois tout les JobTemperament
     *
     * @return array
     */
    public function getJobTemperaments()
    {
        return $this->findAll();
    }

    /**
     * Renvois un jobTemperament choisie par sont id
     *
     * @param $jpId
     * @return null|object
     */
    public function getJobTemperamentById($jpId)
    {
        return $this->findOneBy(["id" => $jpId]);
    }

    public function getJobTemperamentByJobId($jobId)
    {
        $job = $this->getEntityManager()->getRepository("AdminBundle:Job")->getJobById($jobId);

        return $this->findBy(['job' => $job]);
    }

    /**
     * Renvois un JobTemperament choisie par sont job et sont temperament
     *
     * @param $jobId
     * @param $ptId
     * @return null|object
     */
    public function getJobTemperamentByTempIdAndJobId($jobId, $tempId)
    {
        $job = $this->getEntityManager()->getRepository("AdminBundle:Job")->getJobById($jobId);
        $temperament = $this->getEntityManager()->getRepository("AdminBundle:Temperament")->getTemperamentById($tempId);

        return $this->findOneBy(["job" => $job, "temperament" => $temperament]);
    }

    /**
     * Renvois les temperaments lié a un job
     *
     * @param $jobId
     * @return bool|array
     */
    public function getTemperamentsByJobId($jobId)
    {
        $job = $this->getEntityManager()->getRepository("AdminBundle:Job")->getJobById($jobId);

        $JobTemperaments = $this->findBy(['job' => $job]);


        $result = [];
        if(count($JobTemperaments) > 0)
        {
            foreach($JobTemperaments as $jobTemperament)
            {
                $value = $jobTemperament->getValue();
                $name = $jobTemperament->getTemperament()->getName();
                $temperament = $jobTemperament->getTemperament()->getTemperament();
                $opposedTemperament = $jobTemperament->getTemperament()->getOpposedTemperament();
                $idJP = $jobTemperament->getId();

                $result[$name] = [
                    "name" => $name,
                    "value" => $value,
                    "idJP" => $idJP,
                    "temperament" => $temperament,
                    "opposedTemperament" => $opposedTemperament,
                    "temperamentId" => $jobTemperament->getTemperament()->getId()
                ];
            }

            return $result;
        }

        return false;
    }

    /**
     * Créer un nouveau jobTemperament
     *
     * @param $value
     * @param Job $job
     * @param Temperament $temperament
     *
     * @return bool|JobTemperament
     */
    public function postJobTemperament($value, Job $job, Temperament $temperament)
    {
        $em = $this->getEntityManager();
        $jobTemperament = new JobTemperament();

        if(is_numeric($value))
        {
            $jobTemperament->setValue($value)
                ->setJob($job)
                ->setTemperament($temperament);

            $em->persist($jobTemperament);
            $em->flush();

            return $jobTemperament;
        }

        return false;
    }

    /**
     * Modifie un JobTemperament avec une id de jobTemperament
     *
     * @param $jobTemperamentId
     * @param $value
     * @param Job $job
     * @param Temperament $temperament
     *
     * @return bool|object
     */
    public function putJobTemperamentByJtid($jobTemperamentId, $value, Job $job, Temperament $temperament)
    {
        $em = $this->getEntityManager();

        $jobTemperament = $this->getJobTemperamentById($jobTemperamentId);

        if(!is_null($jobTemperament) && (!is_null($value) && is_numeric($value)))
        {
            $jobTemperament->setValue($value)
                ->setTemperament($temperament)
                ->setJob($job);

            $em->persist($jobTemperament);
            $em->flush();

            return $jobTemperament;
        }

        return false;
    }

    /**
     * Modifie un JobTemperament selectionner grâce à sont job et temperament
     *
     * @param $value
     * @param $jobId
     * @param $ptId
     *
     * @return bool|null|object
     */
    public function putJobTemperamentByTempIdAndJobId($value, $jobId, $tempId)
    {
        $em = $this->getEntityManager();
        $job = $this->getEntityManager()->getRepository("AdminBundle:Job")->getJobById($jobId);
        $temp = $this->getEntityManager()->getRepository("AdminBundle:Temperament")->getTemperamentById($tempId);


        $jobTemperament = $this->getJobTemperamentByTempIdAndJobId($jobId, $temp);

        if(!is_null($jobTemperament) && (!is_null($value) && is_numeric($value)))
        {
            $jobTemperament->setValue($value)
                ->setTemperament($temp)
                ->setJob($job);

            $em->persist($jobTemperament);
            $em->flush();

            return $jobTemperament;
        }

        return false;
    }

    /**
     * Supprime un jobTemperament
     *
     * @param $id
     * @return bool
     */
    public function deleteJobTemperament($id)
    {
        $em = $this->getEntityManager();

        $jp = $this->getJobTemperamentById($id);

        if(!is_null($jp))
        {
            $em->remove($jp);
            $em->flush();

            return true;
        }

        return false;
    }
}

