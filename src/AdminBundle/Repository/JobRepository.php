<?php

namespace AdminBundle\Repository;

use AdminBundle\Entity\Job;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Renvois tout les métiers
     *
     * @return array
     */
    public function getJobs()
    {
        return $this->findAll();
    }

    /**
     * Renvois un métier choisie grâce à sont id
     *
     * @param $jobId
     * @return null|object
     */
    public function getJobById($jobId)
    {
        return $this->findOneBy(["id" => $jobId]);
    }

    /**
     * Renvois un metier choisie grâce à sont nom
     *
     * @param $name
     * @return null|object
     */
    public function getOneJobByName($name)
    {
        return $this->findOneBy(["name" => $name]);
    }

    /**
     * Renvois les jobs qui correspondes au nom
     *
     * @param $name
     * @return array
     */
    public function getJobsByName($name)
    {
        return $this->findBy(['name' => $name]);
    }

    /**
     * Créer un nouveau job et le renvois
     * Créer aussi les jobs Personnality pour le job avec une valeur par default a 50
     *
     * @param $name
     * @param $description
     * @param $salaireMax
     * @param $salaireMin
     *
     * @return Job|bool
     */
    public function postJob($name, $description, $formGetData)
    {
        if(!$this->checkIfJobAlreadyExist($name, $description))
        {
            $em = $this->getEntityManager();
            $TemperamentRepo = $this->getEntityManager()->getRepository("AdminBundle:Temperament");
            $JobPersonnalityRepo = $this->getEntityManager()->getRepository("AdminBundle:JobPersonnality");

            $temperaments = $TemperamentRepo->getTemperaments();

            $job = new Job();
            $job = $formGetData;
            $job->setUpdatedAt(new \DateTime());

            $em->persist($job);
            $em->flush();

            foreach ($temperaments as $temperament)
            {
                $JobPersonnalityRepo->postJobPersonnality(50, $job, $temperament);
            }

            return $job;
        }

        return false;
    }


    /**
     * Modifie un job
     *
     * @param $jobId
     * @param $name
     * @param $description
     * @param $salaireMax
     * @param $salaireMin
     *
     * @return bool|object
     */
    public function putJob($jobId, $name, $description, $formGetData)
    {
        $em = $this->getEntityManager();
        $job = $this->getJobById($jobId);

        if(!is_null($job) && (!is_null($name) && !is_null($description) && !is_null($formGetData)))
        {
            $job = $formGetData;
            $job->setUpdatedAt(new \DateTime());

            $em->persist($job);
            $em->flush();

            return $job;
        }
        else
        {
            return false;
        }
    }

    /**
     * Supprime un job
     *
     * @param $jobId
     *
     * @return bool
     */
    public function deleteJob($jobId)
    {
        $em = $this->getEntityManager();

        $job = $this->getJobById($jobId);

        if(!is_null($job))
        {
            $em->remove($job);
            $em->flush();

            return true;
        }

        return false;
    }

    /**
     * Renvois true si le métier existe déjà
     *
     * @param $name
     * @param $description
     *
     * @return bool
     */
    public function checkIfJobAlreadyExist($name, $description)
    {
        $isHereOrNot = $this->getEntityManager()->createQueryBuilder()
            ->select("j")
            ->from("AdminBundle:Job", "j")
            ->where("j.name = :name")
            ->andWhere("j.description = :description")
            ->setParameter(":name", $name)
            ->setParameter(":description", $description)
            ->getQuery()
            ->getResult();

        if(count($isHereOrNot))
            return true;

        return false;
    }

}
