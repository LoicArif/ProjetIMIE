<?php

namespace AdminBundle\Repository;

use AdminBundle\Entity\Question;

/**
 * QUESTIONRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Renvois toutes les questions
     *
     * @return array
     */
    public function getQuestions()
    {
        return $this->findAll();
    }

    /**
     * Renvois une question grâce à sont id
     *
     * @param $id
     *
     * @return null|object
     */
    public function getQuestionById($id)
    {
        return $this->findOneBy(['id' => $id]);
    }

    public function getNumberOfQuestionByTemperament()
    {
        $em = $this->getEntityManager();
        $temperaments = $em->getRepository("AdminBundle:Temperament")->getTemperaments();
        $array = [];

        foreach($temperaments as $temperament)
        {
            $validNumber = 0;
            $invalidNumber = 0;

            $questions = $this->findBy(['temperament' => $temperament]);

            foreach($questions as $question)
            {
                if(count($question->getResponses()) >= 2)
                {
                    $validNumber++;
                }
                else
                {
                    $invalidNumber++;
                }
            }

            $array[$temperament->getName()] = ["valid" => $validNumber, "nonValid" => $invalidNumber];
        }

        return $array;
    }

    /**
     * @param $temperamentId
     * @return array
     */
    public function getQuestionByTemperamentId($temperamentId)
    {
        $array = [];
        $temperament = $this->getEntityManager()->getRepository("AdminBundle:Temperament")->getTemperamentById($temperamentId);

        $questions = $this->getEntityManager()->createQueryBuilder()
            ->select("q.id, q.label")
            ->from("AdminBundle:Question", "q")
            ->where("q.temperament = :temperament")
            ->setParameter(":temperament", $temperament)
            ->getQuery()->getResult();



        foreach($questions as $question)
        {
            $questionObject = $this->getQuestionById($question['id']);

            $responses = $this->getEntityManager()->createQueryBuilder()
                ->select("r.id, r.label, r.value, r.imageName")
                ->from("AdminBundle:Response", "r")
                ->where("r.question = :question")
                ->setParameter(":question", $questionObject)
                ->getQuery()->getResult();

            if(count($responses) >= 2)
                $array[] = [$question, $responses];
        }

        return $array;
    }

    /**
     * Créer une question
     *
     * @param $label
     *
     * @return Question|bool
     */
    public function postQuestion($formQuestion, $temperament)
    {
        $label = $formQuestion['label']->getData();
        $temperamentId = $temperament;

        $temperament = $this->getEntityManager()->getRepository("AdminBundle:Temperament")->getTemperamentById($temperamentId);

        if(!$this->checkIfQuestionAlreadyExist($label))
        {
            $em = $this->getEntityManager();

            $question = new Question();

            $question->setLabel($label)
                ->setTemperament($temperament);

            $em->persist($question);
            $em->flush();

            return $question;
        }

        return false;
    }

    /**
     * Modifie une question
     *
     * @param $formData
     * @return bool|object
     */
    public function putQuestion($id, $formData, $temperament)
    {
        $label = $formData['label']->getData();
        $tempId = $temperament;
        $em = $this->getEntityManager();

        $temperament = $em->getRepository('AdminBundle:Temperament')->getTemperamentById($tempId);
        $question = $this->getQuestionById($id);

        if($question)
        {
            $question->setTemperament($temperament)
                ->setLabel($label);

            $em->persist($question);
            $em->flush();

            return $question;
        }

        return false;
    }

    /**
     * Supprime une question
     *
     * @param $id
     */
    public function deleteQuestion($id)
    {
        $em = $this->getEntityManager();
        $question = $this->getQuestionById($id);

        $em->remove($question);
        $em->flush();
    }

    /**
     * Renvois true si la question existe déjà
     *
     * @param $label
     *
     * @return bool
     */
    public function checkIfQuestionAlreadyExist($label)
    {
        $isHereOrNot = $this->getEntityManager()->createQueryBuilder()
            ->select("q")
            ->from("AdminBundle:Question", "q")
            ->where("q.label = :label")
            ->setParameter(":label", $label)
            ->getQuery()
            ->getResult();

        if(count($isHereOrNot))
            return true;

        return false;
    }
}
